{"version":3,"sources":["logo.svg","components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.view.js","components/RiftRid.js","hooks/useFetchGifs.js","GiftExpertApp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","image","images","title","downsized_medium","GiftGridItem","console","log","className","src","alt","RiftRid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GiftExpertApp","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,kC,kICoC5BC,EAhCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGDC,mBAAS,IAHR,mBAG9BC,EAH8B,KAGlBC,EAHkB,KAerC,OACI,0BAAMC,SARW,SAACC,GACdA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,OAKlB,8CACA,2BACAO,KAAK,OACLC,MAAOT,EACPU,SAhBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACZC,EADY,iDACqCC,UAAWH,GADhD,8DAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAELC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAMF,EAAIG,OACVC,MAAMJ,EAAII,MACVZ,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYE,iBAAiBb,QAVpB,kBAaXM,GAbW,4CAAH,sDCENQ,EAAe,SAAC,GAAsB,IAArBL,EAAoB,EAApBA,GAAIG,EAAgB,EAAhBA,MAAOZ,EAAS,EAATA,IAErC,OADAe,QAAQC,IAAIP,EAAIG,EAAOZ,GAEnB,yBAAKiB,UAAU,6CACb,yBAAKC,IAAKlB,EAAKmB,IAAKP,IACpB,2BAAIA,KCJDQ,EAAU,SAAC,GAAgB,IAAftB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EAChBd,mBAAS,CAC/BqB,KAAM,GACNgB,SAAS,IAH6B,mBACnCC,EADmC,KAC5BC,EAD4B,KAmB1C,OAbAC,qBAAU,WAEV3B,EAAOC,GACF2B,MAAK,SAAAC,GACFH,EAAS,CACLlB,KAAKqB,EACLL,SAAQ,SAGlB,CAACvB,IAIIwB,EDfwBK,CAAa7B,GAArCuB,EAFgC,EAEhCA,QAAcV,EAFkB,EAEvBN,KAEZ,OACA,oCACI,wBAAIY,UAAU,4CAAd,IAA2DnB,GAC1DuB,GAAW,uBAAIJ,UAAU,oCAAd,cACZ,yBAAKA,UAAU,aAEHN,EAAOJ,KAAI,SAAAC,GACX,OAAO,kBAAC,EAAD,eACPoB,IAAKpB,EAAIC,IACLD,UEYTqB,EA1BO,WAAO,IAAD,EAEW7C,mBAAS,CAAC,WAFrB,mBAElBQ,EAFkB,KAENT,EAFM,KAOxB,OACI,6BACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAIA,4BAEQS,EAAWe,KAAK,SAAAT,GACZ,OAAO,kBAAC,EAAD,CAAS8B,IAAK9B,EAAWA,SAAUA,UCXnDgC,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.77a15e4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst AddCategory = ({setCategories}) => {\n\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value) ;\n    }\n    const handleSubmit = (e) => {\n            e.preventDefault();\n            if(inputValue.trim().length > 2){\n                setCategories(categories => [inputValue, ...categories ])\n                setInputValue('');\n            }\n    }\n    return(\n        <form onSubmit={handleSubmit}>\n            <h2>Add categories</h2>\n            <input\n            type='text'\n            value={inputValue}\n            onChange={handleInputChange}\n            />\n        </form>\n\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","\n\nexport const getGif = async(category) =>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI (category)}&limit=5&api_key=4yP59quFLVT42Ny4Ly7X0SlBoBhy89Xa`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\nconst gifs = data.map(img => {\n    return {\n        id: img.id,\n        image:img.images,\n        title:img.title,\n        url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n};","import React from 'react';\n\n\n\nexport const GiftGridItem = ({id, title, url}) => {\n    console.log(id, title, url);\n    return (\n        <div className=\"card animate__animated animate__fadeInUp \">\n          <img src={url} alt={title}/>\n          <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n//import { getGif } from '../helpers/getGifs';\nimport { GiftGridItem } from './GiftGridItem.view';\n\nexport const RiftRid = ({category}) => {\n\nconst {loading, data:images} = useFetchGifs(category);\n\n    return (\n    <>\n        <h3 className=\"animate__animated animate__fadeInDownBig\"> {category}</h3>\n        {loading && <p  className='animate__animated animate__hinge'>Loading...</p>}\n        <div className=\"card-grid\">\n                {\n                    images.map(img => {\n                    return <GiftGridItem\n                    key={img.id}\n                    {...img}/>\n                    })\n                }\n        </div>\n    </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport {getGif} from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\nconst [state, setState] = useState({\n    data: [],\n    loading: true\n});\n\nuseEffect(() => {\n\ngetGif(category)\n    .then(imgs => {\n        setState({\n            data:imgs,\n            loading:false\n            })\n        })\n},[category])\n\n\n\nreturn state;\n}\n","import React, {useState} from 'react';\nimport AddCategory from \"./components/AddCategory\";\nimport { RiftRid } from './components/RiftRid';\n\nconst GiftExpertApp = () => {\n\n    const[categories, setCategories] = useState(['Futbol']);\n\n    //const handleAdd = () => {\n    //    setCategories([...categories, 'Licha'])\n    //}\n    return(\n        <div>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n\n\n            <ol>\n                {\n                    categories.map( category  => {\n                        return <RiftRid key={category}  category={category}/>\n                    })\n                }\n            </ol>\n        </div>\n    )\n}\n\nexport default GiftExpertApp;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GiftExpertApp from \"./GiftExpertApp\";\n\nfunction App() {\n  return (\n    <GiftExpertApp />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}